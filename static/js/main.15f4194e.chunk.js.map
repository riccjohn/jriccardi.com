{"version":3,"sources":["Components/About.js","Components/Contact.js","Components/Navigation.js","Components/SingleProject.js","data/projectData.js","Components/ProjectCards.js","App.js","serviceWorker.js","index.js"],"names":["About","react_default","a","createElement","id","className","Contact","href","target","rel","title","src","alt","Navigation","Icon_default","fontSize","SingleProject","props","project","linkUrl","imgUrl","imgAlt","description","codeProjects","ProjectCards","map","Components_SingleProject","key","App","Components_Navigation","Components_About","Components_ProjectCards","Components_Contact","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15f4194e.chunk.js","sourcesContent":["import React from 'react';\n\nconst About = () => {\n  return (\n    <div id=\"about\">\n      <div className=\"container\">\n        <h1>John Riccardi</h1>\n        <h3>{'{ Developer + Designer + Animator }'}</h3>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nconst Contact = () => {\n  return (\n    <div id=\"contact\">\n      <div className=\"content\">\n\n        <a\n          href=\"https://github.com/riccjohn\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          title=\"Github\"\n          id=\"github\"\n        >\n          <img src=\"/img/github-icon.svg\" alt=\"github\" />\n        </a>\n        <p>Made with <span>â™¥</span> in Madison, WI</p>\n        <a\n          href=\"mailto:john@jriccardi.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          title=\"Email\"\n          id=\"email\"\n        >\n          <img src=\"/img/email-icon.svg\" alt=\"email\" />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Contact;\n","import React from 'react';\nimport Icon from '@material-ui/core/Icon';\n\nconst Navigation = () => {\n  return (\n    <nav className=\"desktop flex\">\n      <a href=\"#home\">\n        <Icon fontSize=\"large\">code</Icon>\n      </a>\n      <a className=\"section\" href=\"#about\">\n        About\n      </a>\n      <a className=\"section\" href=\"#work\">\n        Work\n      </a>\n      <a className=\"section\" href=\"#contact\">\n        Contact\n      </a>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nconst SingleProject = props => {\n  const { project } = props;\n  return (\n\n      <a href={project.linkUrl}>\n        <div id={project.id} className=\"project\">\n          <div className='img-container'>\n            <img src={project.imgUrl} alt={project.imgAlt}/>\n          </div>\n          <div className=\"description\">\n            <p>\n              <span className=\"title\">{project.title}</span>\n              {project.description}\n            </p>\n          </div>\n        </div>\n      </a>\n\n  )\n}\n\nexport default SingleProject;\n","export const codeProjects = [\n  {\n    \"id\" : \"react-ui-animations\",\n    \"title\" : \"React-UI-Animations\",\n    \"linkUrl\" : \"https://github.com/riccjohn/react-ui-animations\",\n    \"imgUrl\" : \"/img/React-Animate-UI.gif\",\n    \"imgAlt\" : \"UI-Animation screencap gif\",\n    \"description\" : \"React.js component library #anime.js\"\n  },\n  {\n    \"id\" : \"hangry\",\n    \"title\" : \"Hangry\",\n    \"linkUrl\" : \"https://github.com/Hangry-App/Hangry\",\n    \"imgUrl\" : \"/img/Hangry.gif\",\n    \"imgAlt\" : \"Hangry screencap gif\",\n    \"description\" : \"iOs app using React-Native, Firebase, and the Foursquare API \",\n  },\n  {\n    \"id\" : 'js-blockchain',\n    \"title\" : \"JS Blockchain Article\",\n    \"linkUrl\" : \"https://medium.com/coinmonks/understanding-and-building-your-own-tiny-blockchain-in-javascript-a16f2137cfec\",\n    \"imgUrl\" : \"/img/blockchain.png\",\n    \"imgAlt\" : \"Blockchain article screenshot\",\n    \"description\" : \"Medium Article - 'Understanding and building your own tiny blockchain in JavaScript' #Node.js\",\n  },\n  {\n    \"id\" : \"knave\",\n    \"title\" : \"Knave Character Generator\",\n    \"linkUrl\": \"https://riccjohn.github.io/Knave-Character-Generator/\",\n    \"imgUrl\" : \"/img/Knave_Mockup.png\",\n    \"imgAlt\" : \"Knave app screenshot\",\n    \"description\" : \"Random chracter generator for a tabletop RPG built using React.js\"\n  }\n]\n\nexport const designProjects = [\n  {\n    \"id\" : \"2970\",\n    \"title\" : \"2970\",\n    \"linkUrl\": \"#\",\n    \"imgUrl\" : \"/img/Moon2970.jpg\",\n    \"imgAlt\" : \"Moon2970 project image\",\n    \"description\" : \"#adobe #after-effects #photoshop #illustrator\"\n  }\n]\n","import React from 'react';\nimport SingleProject from './SingleProject';\nimport { codeProjects } from '../data/projectData';\n\nconst ProjectCards = props => {\n  return (\n    <div id=\"work\">\n      <h1 className=\"button\">Projects</h1>\n      <div className=\"content\">\n        { codeProjects.map( project => (\n          <SingleProject key={project.id} project={project} />\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectCards;\n","import React, { Component } from 'react';\nimport { Navigation, About, Contact, ProjectCards } from './Components/'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <About />\n        <ProjectCards />\n        <Contact />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}